import numpy as np

ranges = [
# (-2.25, (-.6, -2.47)),
# (-2.15, (-.6, -2.47)), # added
# (-2.014, (-.4, -2.5)),
# (-1.8, (-.4, -2.5)), # added
# (-1.778, (-.2, -2.56)),
# (-1.64, (-.2, -2.56)), # added
# (-1.54, (.5, -2.6)),
# (-1.4, (.5, -2.6)), # added
# (-1.306, (.7, -2.6)),
# (-1.071, (1.2, -2.6)),
# (-.83, (2.6, -2.6)),
# (-.599, (2.6, -2.6)),
# (-.364, (2.6, -2.6)),
# (-.128, (2.6, -2.6)),
# (.108, (2.7, -2.55)),
# (.344, (2.6, -2.5)),
# (.579, (2.7, -2.5)),
# (.815, (2.6, -2.5)),
# (1.051, (2.6, -.8)),
# (1.286, (2.6, -.8)),
# (1.4, (2.6, -.5)), # added
# (1.522, (2.6, -.5)),
# (1.6, (2.6, -.1)), # added
# (1.758, (2.6, -.1)),
# (1.86, (2.6, .2)), # added
# (1.994, (2.6, .2)),
# (2.05, (2.6, .4)), # added
# (2.1, (2.6, .4)),
]

def get_data():
    pts = []
    even = True
    for q1, q2range in ranges:
        q2s = list(map(float, list(np.arange(q2range[0], q2range[1], -.3)) + [q2range[1]]))
        for q2_idx, q2 in enumerate(q2s[::(1 if even else -1)]):
            if q2_idx == 0 or q2_idx == len(q2s) - 1:
                pts.append([q1, q2, 4])
            else:
                pts.append([q1, q2, 2])
        even = not even
    return pts